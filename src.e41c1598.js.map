{"version":3,"sources":["src/settings.js","src/partials/Paddle.js","src/partials/Score.js","src/partials/Board.js","src/partials/Ball.js","src/partials/Winner.js","src/partials/Game.js","src/index.js"],"names":["SVG_NS","KEYS","a","z","up","down","spaceBar","PaddleOptions","paddleWidth","paddleHeight","boardGap","Paddle","boardHeight","width","height","x","y","colour","upKey","downKey","speed","score","keyState","document","addEventListener","event","key","Math","max","min","svg","rect","createElementNS","setAttributeNS","appendChild","Score","size","text","textContent","Board","line","Ball","radius","boardWidth","direction","ping","Audio","pingSound","reset","vy","floor","random","vx","abs","hitLeft","hitRight","hitTop","hitBottom","player1","player2","play","playerColour","setTimeout","player","alert","wallCollision","paddleCollision","circle","rightGoal","leftGoal","goal","Winner","message","winner","innerHTML","Game","element","gameElement","getElementById","board","ball","score1","score2","ping1","pingSound1","loop","megaBall","megaBallArray","pause","spawnMegaBall","i","render","forEach","game","gameLoop","requestAnimationFrame"],"mappings":"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","file":"src.e41c1598.js","sourceRoot":"..","sourcesContent":["export const SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport const KEYS = {\r\n    a: \"a\",        // player 1 up key\r\n    z: \"z\",        // player 1 down key\r\n    up: \"ArrowUp\",       // player 2 up key\r\n    down: \"ArrowDown\",     // player 2 down key\r\n    spaceBar: \" \", // we'll use this later...\r\n}\r\n\r\nexport const PaddleOptions = {\r\n    paddleWidth: 8,\r\n    paddleHeight: 56,\r\n    boardGap: 10,\r\n}","import { SVG_NS, KEYS} from \"../settings\";\r\n\r\nexport default class Paddle {\r\n    constructor(boardHeight, width, height, x, y, colour='white',upKey, downKey) {\r\n      this.boardHeight = boardHeight;\r\n      this.width = width;\r\n      this.height = height;\r\n      this.x = x;\r\n      this.y = y;\r\n      this.speed = 10;\r\n      this.score = 0;\r\n      this.colour=colour;\r\n      this.upKey= upKey;\r\n      this.downKey= downKey;\r\n      \r\n      // add this to store the value of key pressed\r\n      this.keyState ={};\r\n       \r\n      // adding action listener for the keys for smooth scrolling of paddles\r\n      document.addEventListener(\"keydown\" , event =>{\r\n           this.keyState[event.key] = true;\r\n      }\r\n      );\r\n      \r\n      document.addEventListener(\"keyup\" , event =>{\r\n        this.keyState[event.key] = false;\r\n    }\r\n   );\r\n\r\n      \r\n    //   document.addEventListener(\"keydown\", event => {\r\n    //     switch (event.key) {\r\n    //         case up:\r\n    //           this.up();\r\n            \r\n    //           break;\r\n    //         case down:\r\n    //           this.down();\r\n    //           break;\r\n    //       }\r\n    //   });\r\n\r\n\r\n    }// end of constructor\r\n    \r\n     up(){\r\n      //this.y = this.y - this.speed;\r\n      this.y = Math.max(0, this.y-this.speed); // -1 is <0 so max value is always 0.\r\n     }\r\n\r\n     down(){\r\n        //this.y = this.y + this.speed;\r\n        this.y = Math.min(this.boardHeight -this.height,this.y + this.speed);\r\n     }\r\n\r\n    render(svg){\r\n         \r\n        // adding smooth scrolling of paddles\r\n        if(this.keyState[KEYS.a] && this.upKey === KEYS.a){\r\n            this.up();\r\n        }\r\n        \r\n        if(this.keyState[KEYS.z] && this.downKey === KEYS.z){\r\n            this.down();\r\n          }\r\n\r\n          if(this.keyState[KEYS.up] && this.upKey === KEYS.up){\r\n            this.up();\r\n          }\r\n\r\n          if(this.keyState[KEYS.down] && this.downKey === KEYS.down){\r\n            this.down();\r\n          }\r\n\r\n        let rect = document.createElementNS(SVG_NS, 'rect');\r\n\r\n        rect.setAttributeNS(null,'fill', this.colour);\r\n        rect.setAttributeNS(null,'width', this.width);\r\n        rect.setAttributeNS(null,'height', this.height);\r\n        rect.setAttributeNS(null, 'x', this.x);\r\n        rect.setAttributeNS(null, 'y', this.y);\r\n\r\n        svg.appendChild(rect);\r\n    }\r\n  }","\r\nimport { SVG_NS } from \"../settings\";\r\nexport default class Score {\r\n  constructor(x, y, size) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.size = size;\r\n  }\r\n  render(svg, score) {\r\n    let text = document.createElementNS(SVG_NS, 'text');\r\n    text.setAttributeNS(null, 'x', this.x);\r\n    text.setAttributeNS(null, 'y', this.y);\r\n    text.setAttributeNS(null, 'font-family', '\"Silkscreen Web\" , monotype');\r\n    text.setAttributeNS(null, 'font-size', this.size);\r\n    text.setAttributeNS(null, 'fill', 'red');\r\n    text.textContent = score;\r\n\r\n\r\n    svg.appendChild(text);\r\n\r\n  }\r\n}","import { SVG_NS } from \"../settings\";\r\n\r\nexport default class Board {\r\n  constructor(width, height) {\r\n    this.width = width;\r\n    this.height = height;\r\n    \r\n  }\r\n  render(svg) {\r\n    let rect = document.createElementNS(SVG_NS, 'rect');\r\n    rect.setAttributeNS(null, 'fill', 'transparent');\r\n    rect.setAttributeNS(null, 'width', this.width);\r\n    rect.setAttributeNS(null, 'height', this.height);\r\n\r\n    let line = document.createElementNS(SVG_NS, 'line');\r\n    line.setAttributeNS(null, 'x1', (this.width / 2));\r\n    line.setAttributeNS(null, 'y1', 0);\r\n    line.setAttributeNS(null, 'x2', (this.width / 2));\r\n    line.setAttributeNS(null, 'y2', this.height);\r\n\r\n    line.setAttributeNS(null, 'stroke', 'white');\r\n    line.setAttributeNS(null, 'stroke-dasharray', '20,20');\r\n    line.setAttributeNS(null, 'stroke-width', '4');\r\n    line.setAttributeNS(null, 'stroke-dashoffset', '22');\r\n\r\n    svg.appendChild(rect);\r\n    svg.appendChild(line);\r\n\r\n  }\r\n}","import { SVG_NS } from \"../settings\";\r\nimport pingSound from \"../../public/sounds/pong-01.wav\";\r\n\r\nexport default class Ball {\r\n  constructor(radius, boardWidth, boardHeight, colour = '#7f7f7f') {\r\n    this.radius = radius;\r\n    this.boardWidth = boardWidth;\r\n    this.boardHeight = boardHeight;\r\n    this.direction = 1;\r\n    this.colour = colour;\r\n\r\n    this.ping = new Audio(pingSound);\r\n\r\n\r\n    this.reset();\r\n\r\n  }\r\n  // reseting the ball to the middle\r\n  reset() {\r\n    this.x = this.boardWidth / 2;\r\n    this.y = this.boardHeight / 2;\r\n    // creating a random vector between +5 and -5\r\n\r\n    this.vy = 0; // fixing the bug so that it doesn't throw any error in the while loop \r\n    while (this.vy === 0) {\r\n      this.vy = Math.floor(Math.random() * 10 - 5);\r\n    }\r\n   \r\n    this.vx = this.direction * (6 - Math.abs(this.vy));\r\n    \r\n  }\r\n  // collision of the ball with the walls of the board\r\n  wallCollision() {\r\n    const hitLeft = this.x - this.radius <= 0;\r\n    const hitRight = this.x + this.radius >= this.boardWidth;\r\n    const hitTop = this.y - this.radius <= 0;\r\n    const hitBottom = this.y + this.radius >= this.boardHeight;\r\n\r\n    if (hitLeft || hitRight) {\r\n      this.vx = -this.vx;\r\n    \r\n    } else if (hitTop || hitBottom) {\r\n      this.vy = -this.vy;\r\n      // or  this.vy *= -1;\r\n    }\r\n\r\n  }\r\n  // paddle collision\r\n  paddleCollision(player1, player2) {\r\n    // moving right\r\n\r\n\r\n    if (this.vx > 0) {\r\n      // collision detection for right paddle\r\n      if (this.x + this.radius >= player2.x && // right edge of the ball is >= left edge of the paddle\r\n        this.x + this.radius <= player2.x + player2.width && // right edge of the ball is <= right edge of the paddle\r\n        (this.y >= player2.y && this.y <= player2.y + player2.height) // ball Y is >= paddle top Y and <= paddle bottom Y\r\n      ) {\r\n        // if true then there's a collision  \r\n        this.vx *= -1;\r\n        this.ping.play();\r\n       \r\n        player2.height += 10;\r\n        player1.height -= 5;\r\n        // -- decreasing the height of the opponent\r\n        let playerColour = player2.colour;\r\n        player2.colour = 'pink';\r\n        setTimeout(function () { //\r\n          //---changing the colour\r\n          player2.colour = playerColour // reset the color\r\n        }, 200);\r\n      }\r\n    } else {\r\n      // moving left\r\n      if (this.x - this.radius <= player1.x + player1.width &&\r\n        this.x - this.radius >= player1.x &&\r\n        (this.y >= player1.y && this.y <= player1.y + player1.height)\r\n      ) {\r\n        this.vx *= -1;\r\n        player1.height += 10;\r\n        player2.height -= 5;\r\n      \r\n        this.ping.play();\r\n        let playerColour = player1.colour;\r\n        player1.colour = 'orange';\r\n        setTimeout(function () { //\r\n          //---changing the colour\r\n          player1.colour = playerColour // reset the color\r\n        }, 200);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //keeping track of score\r\n  goal(player) {\r\n    if (player.score <= 10) {\r\n      player.score++;\r\n      this.reset();\r\n\r\n    } if (player.score === 10) {\r\n      alert(\"GAME OVER\");\r\n\r\n    }\r\n\r\n  }\r\n  render(svg, player1, player2) {\r\n    // vector addition for movement\r\n    this.x += this.vx;\r\n    this.y += this.vy;\r\n\r\n    // call collion method\r\n    this.wallCollision();\r\n    // call paddle collision method\r\n    this.paddleCollision(player1, player2);\r\n\r\n    //create ball elements\r\n    let circle = document.createElementNS(SVG_NS, 'circle');\r\n\r\n    circle.setAttributeNS(null, 'r', this.radius);\r\n    circle.setAttributeNS(null, 'cx', this.x);\r\n    circle.setAttributeNS(null, 'cy', this.y);\r\n    circle.setAttributeNS(null, 'fill', this.colour);\r\n    svg.appendChild(circle);\r\n\r\n    const rightGoal = this.x + this.radius >= this.boardWidth;\r\n    const leftGoal = this.x - this.radius <= 0;\r\n\r\n    if (rightGoal) {\r\n      this.goal(player1);\r\n      this.direction = 1;\r\n    } else if (leftGoal) {\r\n      this.goal(player2);\r\n      this.direction = -1;\r\n    }\r\n\r\n  }\r\n}","\r\nimport { SVG_NS } from \"../settings\";\r\nexport default class Winner {\r\n\tconstructor(x, y, size) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.size = size;\r\n\t}\r\n\trender(svg, message) {\r\n\t\tlet winner = document.createElementNS(SVG_NS, 'text');\r\n\t\twinner.setAttributeNS(null, 'x', this.x);\r\n\t\twinner.setAttributeNS(null, 'y', this.y);\r\n\t\twinner.setAttributeNS(null, 'fill', 'red');\r\n\t\twinner.setAttributeNS(null, 'font-size', this.size);\r\n\t\twinner.setAttributeNS(null, 'font-family', 'Silkscreen Web, monospace');\r\n\t\twinner.innerHTML = message;\r\n\r\n\t\tsvg.appendChild(winner);\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n","import Paddle from './Paddle';\nimport Score from './Score';\nimport Board from './Board';\nimport Ball from './Ball';\nimport Winner from './Winner';\n\nimport pingSound1 from \"../../public/sounds/game_of_thrones.mp3\";\nimport { SVG_NS, KEYS, PaddleOptions } from \"../settings\";\n\n\nexport default class Game {\n  constructor(element, width, height) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n\n    this.gameElement = document.getElementById(this.element);\n    this.board = new Board(this.width, this.height);\n\n    this.ball = new Ball(8, this.width, this.height, '#ff0066');\n    //this.ball1 = new Ball(6, this.width, this.height, 'orange'); if you want to add a 2nd ball\n\n    this.score1 = new Score(this.width / 2 - 50, 30, 30);\n\n    this.score2 = new Score(this.width / 2 + 25, 30, 30);\n\n    this.paddleWidth = 8;\n    this.paddleHeight = 56;\n    this.boardGap = 10;\n\n    this.winner = new Winner(90, 150, 40);\n    // adding sound in the background\n    this.ping1 = new Audio(pingSound1);\n    this.ping1.play();\n    this.ping1.loop = true;\n\n\n\n    this.megaBall = false;\n    this.megaBallArray = [];\n\n    this.player1 = new Paddle(\n      this.height,\n      18,\n      70,\n      PaddleOptions.boardGap,\n      ((this.height - PaddleOptions.paddleHeight) / 2),\n      '#00ff99',\n      KEYS.a,\n      KEYS.z\n    );\n\n\n    this.player2 = new Paddle(\n      this.height, //board height\n      18,\n      70,\n      this.width - (PaddleOptions.boardGap + PaddleOptions.paddleWidth),\n      ((this.height - PaddleOptions.paddleHeight) / 2),\n      'blue',\n      KEYS.up,\n      KEYS.down\n    );\n\n    // adding action listener for pause with the space bar\n    document.addEventListener('keydown', (event) => {\n      switch (event.key) {\n        case KEYS.spaceBar:\n          this.pause = !this.pause;\n          break;\n\n        \n        case 'm':\n          if (this.megaBall === false) {\n            this.spawnMegaBall();\n\n\n          } else {\n            this.megaBall = false;\n          }\n          break;\n      }\n    }\n    );\n\n\n   \n  } // end of constructor\n\n\n  spawnMegaBall() {\n    this.megaBall = true;\n    for (let i = 0; i <= 70; i++) {\n      this.megaBallArray[i] = new Ball(10, this.width, this.height);\n    }\n  }\n\n\n  render() {\n\n    // adding the pause to render method\n    if (this.pause) {\n      return;\n    }\n    \n    this.gameElement.innerHTML = \"\"; // clear the HTML before appending to fix a render bug \n    let svg = document.createElementNS(SVG_NS, \"svg\");\n    svg.setAttributeNS(null, \"width\", this.width);\n    svg.setAttributeNS(null, \"height\", this.height);\n    svg.setAttributeNS(null, \"viewBox\", `0 0 ${this.width} ${this.height}`);\n    this.gameElement.appendChild(svg);\n\n    this.board.render(svg);\n    this.player1.render(svg);\n    this.player2.render(svg);\n    this.ball.render(svg, this.player1, this.player2);\n    \n\n    this.score1.render(svg, this.player1.score);\n    this.score2.render(svg, this.player2.score);\n\n    if (this.megaBall) {\n      this.megaBallArray.forEach(ball => {\n        ball.render(svg, this.player1, this.player2);\n      })\n    }\n\n    \n    // Declare Winner\n    const player1Msg = 'Player 1 Wins!';\n    const player2Msg = 'Player 2 Wins!';\n    if (this.player1.score === 10) {\n      this.pause = true;\n      this.winner.render(svg, player1Msg);\n    } else if (this.player2.score === 10) {\n      this.pause = true;\n      this.winner.render(svg, player2Msg);\n    }\n     //document.location.reload();\n\n\n\n  }\n}\n","import './styles/game.css';\nimport Game from './partials/Game';\n\n// create a game instance\nconst game = new Game('game', 512, 256);\n\n(function gameLoop() {\n  game.render();\n  requestAnimationFrame(gameLoop);\n})();\n"]}